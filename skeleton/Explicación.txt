1. ParticleGenerator
Responsabilidad: Generar partículas y fuegos artificiales en intervalos regulares y agregarlos a un sistema de partículas. También proporciona funciones para generar propiedades aleatorias de las partículas, como dirección, distribución y color.

Métodos principales:
update(): Actualiza el generador y verifica si es el momento de generar una nueva partícula o fuego artificial.

generate(): Genera partículas o fuegos artificiales basados en condiciones aleatorias y los agrega al sistema de partículas.

Métodos auxiliares como UniformDistribution(), UniformDirection(), NormalDistribution(), RandomNormal(), y RandomColor() para generar propiedades aleatorias.

Relación con otras clases: Mantiene una referencia a un ParticleSystem para agregar las partículas y fuegos artificiales generados. También crea instancias de Firework y particle.

2. ParticleSystem

Responsabilidad: Administrar y actualizar una colección de partículas y fuegos artificiales.

Métodos principales:
update(): Llama a los métodos PartUpdate() y FireUpdate() para actualizar partículas y fuegos artificiales respectivamente.

addParticle(): Agrega una nueva partícula a la lista de partículas.

addFirework(): Agrega un nuevo fuego artificial a la lista de fuegos artificiales.

Relación con otras clases: Interactúa con la clase ParticleGenerator ya que esta última agrega partículas y fuegos artificiales al sistema. Además, mantiene listas de partículas y fuegos artificiales que son actualizadas.

3. Firework

Responsabilidad: Representa un fuego artificial con propiedades como posición, velocidad, aceleración, gravedad, masa, amortiguamiento, generación y radio.

Métodos principales:
update(): Actualiza la posición y velocidad del fuego artificial basándose en la integración.

OnDie(): Genera más fuegos artificiales o partículas cuando el fuego artificial actual "muere".

integrate(): Calcula la nueva posición y velocidad del fuego artificial basado en sus propiedades actuales y en un tiempo dado.

Relación con otras clases: Crea y mantiene una referencia a ParticleSystem y ParticleGenerator para poder generar más fuegos artificiales o partículas cuando es necesario. También hace uso del método RandomColor() para determinar un color aleatorio.

Conexiones principales:
El ParticleGenerator crea y agrega partículas y fuegos artificiales al ParticleSystem.
ParticleSystem es responsable de mantener y actualizar todas las partículas y fuegos artificiales.
Firework representa un fuego artificial individual, y puede generar más fuegos artificiales o partículas cuando "muere", utilizando el ParticleGenerator.